{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ahmed\\\\react-memes\\\\src\\\\memes.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport data from \"./data.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n\n  const [memeImage, setMemeImage] = React.useState(\"\");\n  const [memetext, setMemetext] = React.useState({});\n\n  function getMemeImage() {\n    const memesArray = data.data.memes;\n    const randomNumber = Math.floor(Math.random() * memesArray.length);\n    setMemeImage(memesArray[randomNumber].url);\n  }\n\n  function handleChange(event) {\n    if (event.target.name === \"TopText\") {\n      setMemetext(prevMeme => ({ ...prevMeme,\n        TopText: event.target.value\n      }));\n    }\n\n    if (event.target.name === \"BottomText\") {\n      setMemetext(prevMeme => ({ ...prevMeme,\n        BottomText: event.target.value\n      }));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"padding\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleChange,\n          name: \"TopText\",\n          type: \"text\",\n          placeholder: \"Top text\",\n          className: \"form--input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleChange,\n          name: \"BottomText\",\n          type: \"text\",\n          placeholder: \"Bottom text\",\n          className: \"form--input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"img\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: memeImage,\n          className: \"meme-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"meme-text top\",\n          children: memetext.TopText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"meme-text bottom\",\n          children: memetext.BottomText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Meme, \"DJiCbD26UQ0xwEZy+oNhRdrF9Rw=\");\n\n_c = Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"sources":["C:/Users/ahmed/react-memes/src/memes.jsx"],"names":["React","data","Meme","memeImage","setMemeImage","useState","memetext","setMemetext","getMemeImage","memesArray","memes","randomNumber","Math","floor","random","length","url","handleChange","event","target","name","prevMeme","TopText","value","BottomText"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AACA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAAlC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,KAAK,CAACK,QAAN,CAAe,EAAf,CAAhC;;AACA,WAASG,YAAT,GAAwB;AACtB,UAAMC,UAAU,GAAGR,IAAI,CAACA,IAAL,CAAUS,KAA7B;AACA,UAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,UAAU,CAACM,MAAtC,CAArB;AACAX,IAAAA,YAAY,CAACK,UAAU,CAACE,YAAD,CAAV,CAAyBK,GAA1B,CAAZ;AACD;;AACD,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAIA,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,SAA1B,EAAqC;AACnCb,MAAAA,WAAW,CAAEc,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzBC,QAAAA,OAAO,EAAEJ,KAAK,CAACC,MAAN,CAAaI;AAFG,OAAf,CAAD,CAAX;AAID;;AACD,QAAIL,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,YAA1B,EAAwC;AACtCb,MAAAA,WAAW,CAAEc,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzBG,QAAAA,UAAU,EAAEN,KAAK,CAACC,MAAN,CAAaI;AAFA,OAAf,CAAD,CAAX;AAID;AACF;;AAED,sBACE;AAAM,IAAA,SAAS,EAAC,SAAhB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACE;AACE,UAAA,QAAQ,EAAEN,YADZ;AAEE,UAAA,IAAI,EAAC,SAFP;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,WAAW,EAAC,UAJd;AAKE,UAAA,SAAS,EAAC;AALZ;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AACE,UAAA,QAAQ,EAAEA,YADZ;AAEE,UAAA,IAAI,EAAC,YAFP;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,WAAW,EAAC,aAJd;AAKE,UAAA,SAAS,EAAC;AALZ;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAiBE;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAiC,QAAA,OAAO,EAAET,YAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF,eAoBE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACE;AAAK,UAAA,GAAG,EAAEL,SAAV;AAAqB,UAAA,SAAS,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAI,UAAA,SAAS,EAAC,eAAd;AAAA,oBAA+BG,QAAQ,CAACgB;AAAxC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAI,UAAA,SAAS,EAAC,kBAAd;AAAA,oBAAkChB,QAAQ,CAACkB;AAA3C;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD;;GArDuBtB,I;;KAAAA,I","sourcesContent":["import React from \"react\";\r\nimport data from \"./data.js\";\r\nexport default function Meme() {\r\n  const [memeImage, setMemeImage] = React.useState(\"\");\r\n  const [memetext, setMemetext] = React.useState({});\r\n  function getMemeImage() {\r\n    const memesArray = data.data.memes;\r\n    const randomNumber = Math.floor(Math.random() * memesArray.length);\r\n    setMemeImage(memesArray[randomNumber].url);\r\n  }\r\n  function handleChange(event) {\r\n    if (event.target.name === \"TopText\") {\r\n      setMemetext((prevMeme) => ({\r\n        ...prevMeme,\r\n        TopText: event.target.value\r\n      }));\r\n    }\r\n    if (event.target.name === \"BottomText\") {\r\n      setMemetext((prevMeme) => ({\r\n        ...prevMeme,\r\n        BottomText: event.target.value\r\n      }));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main className=\"padding\">\r\n      <div className=\"form\">\r\n        <div className=\"input\">\r\n          <input\r\n            onChange={handleChange}\r\n            name=\"TopText\"\r\n            type=\"text\"\r\n            placeholder=\"Top text\"\r\n            className=\"form--input\"\r\n          />\r\n          <input\r\n            onChange={handleChange}\r\n            name=\"BottomText\"\r\n            type=\"text\"\r\n            placeholder=\"Bottom text\"\r\n            className=\"form--input\"\r\n          />\r\n        </div>\r\n        <button className=\"form--button\" onClick={getMemeImage}>\r\n          Get a new meme image\r\n        </button>\r\n        <div className=\"img\">\r\n          <img src={memeImage} className=\"meme-image\" />\r\n          <h2 className=\"meme-text top\">{memetext.TopText}</h2>\r\n          <h2 className=\"meme-text bottom\">{memetext.BottomText}</h2>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}